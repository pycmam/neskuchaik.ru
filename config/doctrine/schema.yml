options:
  type: INNODB
  charset: utf8

# Точка на карте (базовый класс)
# =========================================================
Point:
  tableName:        app_points
  actAs:
    Timestampable: ~
  columns:
    model:          { type: enum, values: [place, event], notnull: true }
    geo_lat:        { type: real }
    geo_lng:        { type: real }
    user_id:        { type: integer, notnull: true }
    title:          { type: string(255), notnull: true }
    description:    { type: string }
    icon:           { type: string(25), notnull: true, default: star }
    tags:           { type: string }
    image_id:       { type: integer }

  relations:
    User:
      class: sfGuardUser
      local: user_id
      foreign: id
      foreignAlias: Points
      onDelete: CASCADE
    Users:
      class: sfGuardUser
      refClass: PointUser
      local: point_id
      foreign: user_id
      foreignAlias: Points
    PrimaryImage:
      class: ImagePoint
      local: image_id
      autoComplete: false
      onDelete: SET NULL

# Событие
# =========================================================
Event:
  inheritance:
    extends: Point
    type: column_aggregation
    keyField: model
    keyValue: event
  columns:
    place_id:    { type: integer }
    fire_at:     { type: timestamp, notnull: true }
    last_fire_at: { type: timestamp }
    is_active:   { type: boolean, notnull: true, default: true }
  relations:
    Place:
      local: place_id
      foreign: id
      foreignAlias: Events
      onDelete: CASCADE

# Место
# =========================================================
Place:
  inheritance:
    extends: Point
    type: column_aggregation
    keyField: model
    keyValue: place

# Связь точка-юзер, для событий - народ, который учавствует
# =========================================================
PointUser:
  tableName:        app_point_users
  columns:
    point_id:       { type: integer, primary: true }
    user_id:        { type: integer, primary: true }
  relations:
    Point:
      local: point_id
      foreign: id
      foreignAlias: PointUser
      onDelete: CASCADE
    User:
      class: sfGuardUser
      local: user_id
      foreign: id
      foreignAlias: PointUser
      onDelete: CASCADE
  options:
    symfony:
      form: false
      filter: false

# Комменты
# =========================================================
Comment:
  tableName:      app_comments
  actAs:
    Timestampable: ~
  columns:
    point_id:     { type: integer, notnull: true }
    user_id:      { type: integer, notnull: true }
    comment:      { type: string(1024), notnull: true }
  relations:
    Point:
      local: point_id
      foreign: id
      foreignAlias: Comments
      onDelete: CASCADE
    User:
      class: sfGuardUser
      local: user_id
      foreign: id
      onDelete: CASCADE

# Идентификаторы openID
# =========================================================
Identity:
  tableName:        app_identities
  actAs:
    Timestampable:  ~
  columns:
    user_id:        { type: integer, notnull: true }
    identity:       { type: string(255), notnull: true, unique: true }
    provider:       { type: string(255) }
  relations:
    User:
      class: sfGuardUser
      local: user_id
      foreign: id
      foreignAlias: Identities
      onDelete: CASCADE

# Уведомления
# =========================================================
Message:
  tableName:      app_messages
  actAs:
    Timestampable: ~
  columns:
    transport:    { type: enum, values: [email, icq, jabber, sms], notnull: true }
    user_id:      { type: integer, notnull: true }
    message:      { type: string, notnull: true }
    is_urgent:    { type: boolean, notnull: true, default: 0 }
    is_complete:  { type: boolean, notnull: true, default: 0 }
    complete_at:  { type: timestamp }

  relations:
    User:
      class: sfGuardUser
      local: user_id
      foreign: id
      onDelete: CASCADE
 

# Шаблоны уведомлений
# =========================================================
MessageTemplate:
  tableName:      app_message_templates
  columns:
    transport:    { type: enum, values: [email, icq, jabber, sms], notnull: true }
    name:         { type: string(255), notnull: true }
    subject:      { type: string(255) }
    body:         { type: string, notnull: true }
